#include <iostream>
using namespace std;

const int MAX_SIZE = 100; // Maximum non-zero elements supported

struct SparseMatrix {
    int row[MAX_SIZE];   // Row indices
    int col[MAX_SIZE];   // Column indices
    int val[MAX_SIZE];   // Values of non-zero elements
    int nonZeroCount;    // Number of non-zero elements

    // Constructor to initialize matrix
    SparseMatrix() : nonZeroCount(0) {}

    // Function to insert a non-zero element
    void insert(int r, int c, int value) {
        if (value != 0 && nonZeroCount < MAX_SIZE) {
            row[nonZeroCount] = r;
            col[nonZeroCount] = c;
            val[nonZeroCount] = value;
            nonZeroCount++;
        }
    }

    // Function to display the sparse matrix representation
    void display() {
        cout << "Row  Column  Value\n";
        for (int i = 0; i < nonZeroCount; i++) {
            cout << row[i] << "     " << col[i] << "     " << val[i] << "\n";
        }
    }
};

int main() {
    SparseMatrix sm;

    // Example 3x3 matrix
    int matrix[3][3] = {
        {5, 0, 0},
        {0, 8, 0},
        {0, 0, 3}
    };

    // Insert non-zero elements into sparse matrix representation
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (matrix[i][j] != 0) {
                sm.insert(i, j, matrix[i][j]);
            }
        }
    }

    // Display sparse matrix representation
    sm.display();

    return 0;
}
