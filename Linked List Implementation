#include <iostream>
using namespace std;

// Node structure for linked list representation of sparse matrix
struct Node {
    int row, col, value;
    Node* next;

    // Constructor to initialize node
    Node(int r, int c, int v) : row(r), col(c), value(v), next(nullptr) {}
};

class SparseMatrix {
private:
    Node* head;

public:
    SparseMatrix() : head(nullptr) {}

    // Function to insert a non-zero element
    void insert(int r, int c, int v) {
        if (v == 0) return;  // Ignore zero values

        Node* newNode = new Node(r, c, v);

        // Insert at the beginning of the list
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Function to display the linked list representation
    void display() {
        Node* temp = head;
        cout << "Row  Column  Value\n";
        while (temp) {
            cout << temp->row << "     " << temp->col << "     " << temp->value << "\n";
            temp = temp->next;
        }
    }

    // Destructor to free memory
    ~SparseMatrix() {
        Node* temp;
        while (head) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    SparseMatrix sm;

    // Example 3x3 sparse matrix
    int matrix[3][3] = {
        {5, 0, 0},
        {0, 8, 0},
        {0, 0, 3}
    };

    // Insert non-zero elements into the linked list
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (matrix[i][j] != 0) {
                sm.insert(i, j, matrix[i][j]);
            }
        }
    }

    // Display sparse matrix linked list representation
    sm.display();

    return 0;
}
