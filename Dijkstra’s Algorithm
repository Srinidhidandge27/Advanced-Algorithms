#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <limits>

using namespace std;

// Define an adjacency list to store the graph
class Graph {
public:
    unordered_map<char, vector<pair<char, int>>> adj;

    // Add edge to the graph
    void addEdge(char u, char v, int weight) {
        adj[u].push_back({v, weight});
        adj[v].push_back({u, weight}); // Undirected graph
    }

    // Dijkstra's Algorithm Implementation
    void dijkstra(char start, char end) {
        unordered_map<char, int> dist;
        unordered_map<char, char> parent;
        priority_queue<pair<int, char>, vector<pair<int, char>>, greater<>> pq;

        // Initialize distances to infinity
        for (auto &node : adj) {
            dist[node.first] = numeric_limits<int>::max();
        }

        // Start from the source node
        dist[start] = 0;
        pq.push({0, start});

        while (!pq.empty()) {
            char current = pq.top().second;
            int currentDist = pq.top().first;
            pq.pop();

            // If we reach the destination node, break early
            if (current == end) break;

            // Process neighbors
            for (auto &neighbor : adj[current]) {
                char nextNode = neighbor.first;
                int edgeWeight = neighbor.second;

                // Relaxation step
                if (dist[current] + edgeWeight < dist[nextNode]) {
                    dist[nextNode] = dist[current] + edgeWeight;
                    pq.push({dist[nextNode], nextNode});
                    parent[nextNode] = current;
                }
            }
        }

        // Output shortest path and cost
        cout << "Shortest Path Cost: " << dist[end] << endl;
        cout << "Path: ";

        // Backtrack to find the shortest path
        vector<char> path;
        for (char at = end; at != start; at = parent[at]) {
            path.push_back(at);
        }
        path.push_back(start);

        // Print the path in correct order
        for (int i = path.size() - 1; i >= 0; i--) {
            cout << path[i];
            if (i != 0) cout << " -> ";
        }
        cout << endl;
    }
};

int main() {
    Graph g;

    // Hardcoded graph
    g.addEdge('A', 'B', 10);
    g.addEdge('A', 'E', 3);
    g.addEdge('E', 'B', 1);
    g.addEdge('E', 'D', 2);
    g.addEdge('B', 'C', 2);
    g.addEdge('D', 'C', 8);
    g.addEdge('C', 'D', 7);

    char start, end;
    cout << "Enter start node: ";
    cin >> start;
    cout << "Enter end node: ";
    cin >> end;

    g.dijkstra(start, end);

    return 0;
}
